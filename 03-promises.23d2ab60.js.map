{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAuCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAO,C,SAAEL,E,MAAUC,GAEzB,OAAO,IAAIK,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLP,EAEFK,EAAQF,GAGRG,EAAOH,KAERJ,MAjDMS,SAASC,cAAc,QAC/BC,iBAAiB,UAEtB,SAA0BC,GACxBA,EAAIC,iBACJ,MAAMC,EAAeF,EAAIG,cAAcC,SACvC,IAAIhB,EAAQiB,SAASH,EAAad,MAAMkB,OACxC,MAAMC,EAAOF,SAASH,EAAaK,KAAKD,OAClCE,EAASH,SAASH,EAAaM,OAAOF,QAM9C,SAA+BG,EAAOF,EAAMC,GAE1C,IAAK,IAAIE,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAChCxB,EAAcwB,EAAGD,GACdE,MAAK,EAACC,EAAEA,EAACxB,MAAEA,MACVJ,EAAA6B,OAAOC,QAAQ,uBAAqBF,QAAUxB,UAE/C2B,OAAM,EAACH,EAAEA,EAACxB,MAAEA,MACXJ,EAAA6B,OAAOG,QAAQ,sBAAoBJ,QAAUxB,UAGjDqB,GAASF,EAfXU,CAAsB7B,EAAOmB,EAAMC","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst form = document.querySelector('form')\nform.addEventListener('submit', onClickSubmitBtn)\n\nfunction onClickSubmitBtn(evt) {\n  evt.preventDefault();\n  const formElements = evt.currentTarget.elements;\n  let delay = parseInt(formElements.delay.value);\n  const step = parseInt(formElements.step.value);\n  const amount = parseInt(formElements.amount.value);\n\n  createPromiseToCircle(delay, step, amount);\n\n}\n\nfunction createPromiseToCircle(delay, step, amount) {\n  \n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ i, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${i} in ${delay}ms`)\n      })\n      .catch(({ i, delay }) => {\n        Notify.failure(`❌ Rejected promise ${i} in ${delay}ms`)\n      })\n\n    delay += step\n  }\n}\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const data = { position, delay };\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve(data);\n      } else {\n        // Reject\n        reject(data);\n      }\n    }, delay)\n  })\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","data","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","evt","preventDefault","formElements","currentTarget","elements","parseInt","value","step","amount","delay1","i1","then","i","Notify","success","catch","failure","$47d4ff9957288465$var$createPromiseToCircle"],"version":3,"file":"03-promises.23d2ab60.js.map"}