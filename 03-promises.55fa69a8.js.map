{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAwCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAO,CAAEL,WAAUC,SAEzB,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLP,EAEFK,EAAQF,GAGRG,EAAOH,KAERJ,MAlDMS,SAASC,cAAc,QAC/BC,iBAAiB,UAEtB,SAA0BC,GACxBA,EAAIC,iBACJ,IAAMC,EAAeF,EAAIG,cAAcC,SACnChB,EAAQiB,SAASH,EAAad,MAAMkB,OAClCC,EAAOF,SAASH,EAAaK,KAAKD,OAClCE,EAASH,SAASH,EAAaM,OAAOF,QAM9C,SAA+BlB,EAAOmB,EAAMC,GAE1C,IAAK,IAAIC,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACrDvB,EAAcuB,EAAUrB,GACrBsB,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUyB,EAAKD,EAALvB,MAEjBJ,EAAA6B,OAAOC,QAAQ,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAANH,EAAM,UAE9DI,OAAM,SAAAL,G,IAAGxB,EAAQwB,EAARxB,SAAUyB,EAAKD,EAALvB,MAClBJ,EAAA6B,OAAOI,QAAQ,sBAAuCF,OAAf5B,EAAS,QAAY4B,OAANH,EAAM,UAGhExB,GAASmB,EAhBXW,CAAsB9B,EAAOmB,EAAMC,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst form = document.querySelector('form')\nform.addEventListener('submit', onClickSubmitBtn)\n\nfunction onClickSubmitBtn(evt) {\n  evt.preventDefault();\n  const formElements = evt.currentTarget.elements;\n  let delay = parseInt(formElements.delay.value);\n  const step = parseInt(formElements.step.value);\n  const amount = parseInt(formElements.amount.value);\n\n  createPromiseToCircle(delay, step, amount);\n\n}\n\nfunction createPromiseToCircle(delay, step, amount) {\n  \n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n      })\n\n    delay += step\n  }\n}\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const data = { position, delay };\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve(data);\n      } else {\n        // Reject\n        reject(data);\n      }\n    }, delay)\n  })\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","data","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","evt","preventDefault","formElements","currentTarget","elements","parseInt","value","step","amount","position1","then","param","_$delay","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createPromiseToCircle"],"version":3,"file":"03-promises.55fa69a8.js.map"}